import streamlit as st
import pandas as pd
import json
import os

DATA_FILE = "data.json"

st.set_page_config(page_title="–°–ö–ê–¢-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª –∏–∑ Excel")

# –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–æ–≤
uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ Excel (.xlsx)", type="xlsx", accept_multiple_files=True)

# –®–∞–≥ 2: –≥–∞–ª–æ—á–∫–∞ –°–ö–ê–¢
is_skat = st.checkbox("–≠—Ç–æ –°–ö–ê–¢? (–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ)")

# –®–∞–≥ 3: –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫
col1, col2 = st.columns(2)
start_id = col1.text_input("–ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 003181):")
end_id = col2.text_input("–ö–æ–Ω–µ—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 003200):")

if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å"):
    if uploaded_files and start_id and end_id:
        all_rows = []
        for file in uploaded_files:
            df = pd.read_excel(file, dtype=str)
            for _, row in df.iterrows():
                id_str = row.iloc[0].strip()
                numbers = [int(x.strip()) for x in row.iloc[1:7]]
                if is_skat:
                    numbers = numbers[:-1]
                all_rows.append({"id": id_str, "values": numbers})

        filtered = [item for item in all_rows if start_id <= item["id"] <= end_id]

        counts = {}
        for item in filtered:
            for num in item["values"]:
                counts[num] = counts.get(num, 0) + 1
        counts = {num: cnt * 2 for num, cnt in counts.items()}

        groups = {}
        for item in filtered:
            for num in item["values"]:
                diff = abs(int(str(num)[0]) - int(str(num)[1]))
                groups.setdefault(diff, []).append(num)

        mirror_groups = {}
        for diff, nums in groups.items():
            unique_nums = sorted(set(nums))
            visited = set()
            group_result = []

            for num in unique_nums:
                if num in visited:
                    continue
                mirror = int(str(num)[::-1])
                cnt = counts.get(num, 0)
                if mirror != num and mirror in unique_nums:
                    cnt_mirror = counts.get(mirror, 0)
                    group_result.append({
                        "number": num, "count": cnt,
                        "mirror": mirror, "mirror_count": cnt_mirror
                    })
                    visited.add(num)
                    visited.add(mirror)
                else:
                    group_result.append({"number": num, "count": cnt})
                    visited.add(num)

            mirror_groups[diff] = group_result

        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(mirror_groups, f, ensure_ascii=False, indent=2)

        st.success(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {len(filtered)}")
        for diff, items in mirror_groups.items():
            st.subheader(f"–ì—Ä—É–ø–ø–∞ —Å —Ä–∞–∑–Ω–æ—Å—Ç—å—é —Ü–∏—Ñ—Ä: {diff}")
            rows = []
            for item in items:
                if "mirror" in item:
                    rows.append({
                        "–ß–∏—Å–ª–æ": item["number"],
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": item["count"],
                        "–ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ": item["mirror"],
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ": item["mirror_count"]
                    })
                else:
                    rows.append({
                        "–ß–∏—Å–ª–æ": item["number"],
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": item["count"],
                        "–ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ": "",
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ": ""
                    })
            df_result = pd.DataFrame(rows)
            st.dataframe(df_result, use_container_width=True)
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω.")

st.header("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (data.json)")
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data_json = json.load(f)
    edited = st.text_area("–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ JSON", json.dumps(data_json, indent=2, ensure_ascii=False), height=400)
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
        try:
            new_data = json.loads(edited)
            with open(DATA_FILE, "w", encoding="utf-8") as f:
                json.dump(new_data, f, ensure_ascii=False, indent=2)
            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        except json.JSONDecodeError:
            st.error("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.")
else:
    st.info("–§–∞–π–ª data.json –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")