import streamlit as st
import pandas as pd
import json
import os

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
RAW_DATA_FILE = "raw_data.json"  # –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
RESULT_FILE = "mirror_groups.json"  # —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

st.set_page_config(page_title="–°–ö–ê–¢-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª –∏–∑ Excel")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (raw_data) ---
st.header("1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
cols = st.columns(2)
with cols[0]:
    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã Excel –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º", 
        type="xlsx", accept_multiple_files=True)
    if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º"):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª raw_data.json
        raw_data = []
        if os.path.exists(RAW_DATA_FILE):
            with open(RAW_DATA_FILE, "r", encoding="utf-8") as f:
                raw_data = json.load(f)
        # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
        for file in uploaded_files:
            df = pd.read_excel(file, dtype=str)
            for _, row in df.iterrows():
                id_str = row.iloc[0].strip()
                values = [int(x.strip()) for x in row.iloc[1:7]]
                # –æ–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º
                existing = next((item for item in raw_data if item["id"] == id_str), None)
                if existing:
                    existing["values"] = values
                else:
                    raw_data.append({"id": id_str, "values": values})
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º raw_data
        with open(RAW_DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(raw_data, f, ensure_ascii=False, indent=2)
        st.success(f"–ò—Å—Ö–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö: {len(raw_data)}")

with cols[1]:
    if os.path.exists(RAW_DATA_FILE):
        st.write(f"–ò—Å—Ö–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö: {len(json.load(open(RAW_DATA_FILE)))}")
    else:
        st.info("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª—ã —Å–ª–µ–≤–∞.")

# --- –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ---
st.header("2. –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
diff_col1, diff_col2 = st.columns(2)
is_skat = diff_col1.checkbox("–≠—Ç–æ –°–ö–ê–¢? (–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ)")
start_id = diff_col1.text_input("–ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 003181):")
end_id = diff_col2.text_input("–ö–æ–Ω–µ—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 003200):")

if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω"):
    if not os.path.exists(RAW_DATA_FILE):
        st.error("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
    elif not start_id or not end_id:
        st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
    else:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º raw_data
        raw_data = json.load(open(RAW_DATA_FILE, "r", encoding="utf-8"))
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
        filtered = [item.copy() for item in raw_data if start_id <= item["id"] <= end_id]
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ü–∏—é –°–ö–ê–¢
        if is_skat:
            for item in filtered:
                if len(item["values"]) > 1:
                    item["values"] = item["values"][:-1]
        # –ü–æ–¥—Å—á—ë—Ç —É–¥–≤–æ–µ–Ω–Ω—ã–π
        counts = {}
        for item in filtered:
            for num in item["values"]:
                counts[num] = counts.get(num, 0) + 1
        counts = {num: cnt * 2 for num, cnt in counts.items()}
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä
        groups = {}
        for item in filtered:
            for num in item["values"]:
                diff = abs(int(str(num)[0]) - int(str(num)[1]))
                groups.setdefault(diff, []).append(num)
        # –ü–æ–∏—Å–∫ –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —á–∏—Å–µ–ª
        mirror_groups = {}
        for diff, nums in groups.items():
            unique_nums = sorted(set(nums))
            visited = set()
            grp = []
            for num in unique_nums:
                if num in visited:
                    continue
                mirror = int(str(num)[::-1])
                cnt = counts.get(num, 0)
                if mirror != num and mirror in unique_nums:
                    cnt_mirr = counts.get(mirror, 0)
                    grp.append({"number": num, "count": cnt, "mirror": mirror, "mirror_count": cnt_mirr})
                    visited.update({num, mirror})
                else:
                    grp.append({"number": num, "count": cnt})
                    visited.add(num)
            mirror_groups[diff] = grp
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(RESULT_FILE, "w", encoding="utf-8") as f:
            json.dump(mirror_groups, f, ensure_ascii=False, indent=2)
        st.success(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {len(filtered)}")
        # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü
        for diff, items in mirror_groups.items():
            st.subheader(f"–ì—Ä—É–ø–ø–∞ —Å —Ä–∞–∑–Ω–æ—Å—Ç—å—é —Ü–∏—Ñ—Ä: {diff}")
            rows = []
            for it in items:
                row = {"–ß–∏—Å–ª–æ": it["number"], "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": it["count"]}
                if "mirror" in it:
                    row["–ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"] = it["mirror"]
                    row["–ö–æ–ª-–≤–æ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ"] = it["mirror_count"]
                else:
                    row["–ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"] = ""
                    row["–ö–æ–ª-–≤–æ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ"] = ""
                rows.append(row)
            st.dataframe(pd.DataFrame(rows), use_container_width=True)

# --- –†–µ–¥–∞–∫—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
st.header("3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
if os.path.exists(RESULT_FILE):
    data_json = json.load(open(RESULT_FILE, "r", encoding="utf-8"))
    edited = st.text_area("–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ mirror_groups.json", json.dumps(data_json, indent=2, ensure_ascii=False), height=300)
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
        try:
            new_data = json.loads(edited)
            with open(RESULT_FILE, "w", encoding="utf-8") as f:
                json.dump(new_data, f, ensure_ascii=False, indent=2)
            st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        except json.JSONDecodeError:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.")
else:
    st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω.")
